// Code generated by MockGen. DO NOT EDIT.
// Source: store/store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/golang/mock/gomock"
	"github.com/tinode/chat/server/auth"
	"github.com/tinode/chat/server/media"
	"github.com/tinode/chat/server/store/types"
	"github.com/tinode/chat/server/validate"
)

// MockStoreInterface is a mock of StoreInterface interface
type MockStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStoreInterfaceMockRecorder
}

// MockStoreInterfaceMockRecorder is the mock recorder for MockStoreInterface
type MockStoreInterfaceMockRecorder struct {
	mock *MockStoreInterface
}

// NewMockStoreInterface creates a new mock instance
func NewMockStoreInterface(ctrl *gomock.Controller) *MockStoreInterface {
	mock := &MockStoreInterface{ctrl: ctrl}
	mock.recorder = &MockStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreInterface) EXPECT() *MockStoreInterfaceMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockStoreInterface) Open(workerId int, jsonconf json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", workerId, jsonconf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockStoreInterfaceMockRecorder) Open(workerId, jsonconf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStoreInterface)(nil).Open), workerId, jsonconf)
}

// Close mocks base method
func (m *MockStoreInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStoreInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStoreInterface)(nil).Close))
}

// IsOpen mocks base method
func (m *MockStoreInterface) IsOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen
func (mr *MockStoreInterfaceMockRecorder) IsOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockStoreInterface)(nil).IsOpen))
}

// GetAdapterName mocks base method
func (m *MockStoreInterface) GetAdapterName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAdapterName indicates an expected call of GetAdapterName
func (mr *MockStoreInterfaceMockRecorder) GetAdapterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterName", reflect.TypeOf((*MockStoreInterface)(nil).GetAdapterName))
}

// GetAdapterVersion mocks base method
func (m *MockStoreInterface) GetAdapterVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAdapterVersion indicates an expected call of GetAdapterVersion
func (mr *MockStoreInterfaceMockRecorder) GetAdapterVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterVersion", reflect.TypeOf((*MockStoreInterface)(nil).GetAdapterVersion))
}

// GetDbVersion mocks base method
func (m *MockStoreInterface) GetDbVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDbVersion indicates an expected call of GetDbVersion
func (mr *MockStoreInterfaceMockRecorder) GetDbVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbVersion", reflect.TypeOf((*MockStoreInterface)(nil).GetDbVersion))
}

// InitDb mocks base method
func (m *MockStoreInterface) InitDb(jsonconf json.RawMessage, reset bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDb", jsonconf, reset)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDb indicates an expected call of InitDb
func (mr *MockStoreInterfaceMockRecorder) InitDb(jsonconf, reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDb", reflect.TypeOf((*MockStoreInterface)(nil).InitDb), jsonconf, reset)
}

// UpgradeDb mocks base method
func (m *MockStoreInterface) UpgradeDb(jsonconf json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeDb", jsonconf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeDb indicates an expected call of UpgradeDb
func (mr *MockStoreInterfaceMockRecorder) UpgradeDb(jsonconf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeDb", reflect.TypeOf((*MockStoreInterface)(nil).UpgradeDb), jsonconf)
}

// GetUid mocks base method
func (m *MockStoreInterface) GetUid() types.Uid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUid")
	ret0, _ := ret[0].(types.Uid)
	return ret0
}

// GetUid indicates an expected call of GetUid
func (mr *MockStoreInterfaceMockRecorder) GetUid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUid", reflect.TypeOf((*MockStoreInterface)(nil).GetUid))
}

// GetUidString mocks base method
func (m *MockStoreInterface) GetUidString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUidString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUidString indicates an expected call of GetUidString
func (mr *MockStoreInterfaceMockRecorder) GetUidString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUidString", reflect.TypeOf((*MockStoreInterface)(nil).GetUidString))
}

// DbStats mocks base method
func (m *MockStoreInterface) DbStats() func() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbStats")
	ret0, _ := ret[0].(func() interface{})
	return ret0
}

// DbStats indicates an expected call of DbStats
func (mr *MockStoreInterfaceMockRecorder) DbStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbStats", reflect.TypeOf((*MockStoreInterface)(nil).DbStats))
}

// GetAuthNames mocks base method
func (m *MockStoreInterface) GetAuthNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAuthNames indicates an expected call of GetAuthNames
func (mr *MockStoreInterfaceMockRecorder) GetAuthNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthNames", reflect.TypeOf((*MockStoreInterface)(nil).GetAuthNames))
}

// GetAuthHandler mocks base method
func (m *MockStoreInterface) GetAuthHandler(name string) auth.AuthHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthHandler", name)
	ret0, _ := ret[0].(auth.AuthHandler)
	return ret0
}

// GetAuthHandler indicates an expected call of GetAuthHandler
func (mr *MockStoreInterfaceMockRecorder) GetAuthHandler(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthHandler", reflect.TypeOf((*MockStoreInterface)(nil).GetAuthHandler), name)
}

// GetLogicalAuthHandler mocks base method
func (m *MockStoreInterface) GetLogicalAuthHandler(name string) auth.AuthHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalAuthHandler", name)
	ret0, _ := ret[0].(auth.AuthHandler)
	return ret0
}

// GetLogicalAuthHandler indicates an expected call of GetLogicalAuthHandler
func (mr *MockStoreInterfaceMockRecorder) GetLogicalAuthHandler(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalAuthHandler", reflect.TypeOf((*MockStoreInterface)(nil).GetLogicalAuthHandler), name)
}

// GetValidator mocks base method
func (m *MockStoreInterface) GetValidator(name string) validate.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", name)
	ret0, _ := ret[0].(validate.Validator)
	return ret0
}

// GetValidator indicates an expected call of GetValidator
func (mr *MockStoreInterfaceMockRecorder) GetValidator(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockStoreInterface)(nil).GetValidator), name)
}

// GetMediaHandler mocks base method
func (m *MockStoreInterface) GetMediaHandler() media.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaHandler")
	ret0, _ := ret[0].(media.Handler)
	return ret0
}

// GetMediaHandler indicates an expected call of GetMediaHandler
func (mr *MockStoreInterfaceMockRecorder) GetMediaHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaHandler", reflect.TypeOf((*MockStoreInterface)(nil).GetMediaHandler))
}

// UseMediaHandler mocks base method
func (m *MockStoreInterface) UseMediaHandler(name, config string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseMediaHandler", name, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseMediaHandler indicates an expected call of UseMediaHandler
func (mr *MockStoreInterfaceMockRecorder) UseMediaHandler(name, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMediaHandler", reflect.TypeOf((*MockStoreInterface)(nil).UseMediaHandler), name, config)
}

// MockUsersObjMapperInterface is a mock of UsersObjMapperInterface interface
type MockUsersObjMapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsersObjMapperInterfaceMockRecorder
}

// MockUsersObjMapperInterfaceMockRecorder is the mock recorder for MockUsersObjMapperInterface
type MockUsersObjMapperInterfaceMockRecorder struct {
	mock *MockUsersObjMapperInterface
}

// NewMockUsersObjMapperInterface creates a new mock instance
func NewMockUsersObjMapperInterface(ctrl *gomock.Controller) *MockUsersObjMapperInterface {
	mock := &MockUsersObjMapperInterface{ctrl: ctrl}
	mock.recorder = &MockUsersObjMapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersObjMapperInterface) EXPECT() *MockUsersObjMapperInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUsersObjMapperInterface) Create(user *types.User, private interface{}) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user, private)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUsersObjMapperInterfaceMockRecorder) Create(user, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).Create), user, private)
}

// GetAuthRecord mocks base method
func (m *MockUsersObjMapperInterface) GetAuthRecord(user types.Uid, scheme string) (string, auth.Level, []byte, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthRecord", user, scheme)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(auth.Level)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(time.Time)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAuthRecord indicates an expected call of GetAuthRecord
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetAuthRecord(user, scheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthRecord", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetAuthRecord), user, scheme)
}

// GetAuthUniqueRecord mocks base method
func (m *MockUsersObjMapperInterface) GetAuthUniqueRecord(scheme, unique string) (types.Uid, auth.Level, []byte, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthUniqueRecord", scheme, unique)
	ret0, _ := ret[0].(types.Uid)
	ret1, _ := ret[1].(auth.Level)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(time.Time)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAuthUniqueRecord indicates an expected call of GetAuthUniqueRecord
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetAuthUniqueRecord(scheme, unique interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthUniqueRecord", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetAuthUniqueRecord), scheme, unique)
}

// AddAuthRecord mocks base method
func (m *MockUsersObjMapperInterface) AddAuthRecord(uid types.Uid, authLvl auth.Level, scheme, unique string, secret []byte, expires time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthRecord", uid, authLvl, scheme, unique, secret, expires)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthRecord indicates an expected call of AddAuthRecord
func (mr *MockUsersObjMapperInterfaceMockRecorder) AddAuthRecord(uid, authLvl, scheme, unique, secret, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthRecord", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).AddAuthRecord), uid, authLvl, scheme, unique, secret, expires)
}

// UpdateAuthRecord mocks base method
func (m *MockUsersObjMapperInterface) UpdateAuthRecord(uid types.Uid, authLvl auth.Level, scheme, unique string, secret []byte, expires time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthRecord", uid, authLvl, scheme, unique, secret, expires)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthRecord indicates an expected call of UpdateAuthRecord
func (mr *MockUsersObjMapperInterfaceMockRecorder) UpdateAuthRecord(uid, authLvl, scheme, unique, secret, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthRecord", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).UpdateAuthRecord), uid, authLvl, scheme, unique, secret, expires)
}

// DelAuthRecords mocks base method
func (m *MockUsersObjMapperInterface) DelAuthRecords(uid types.Uid, scheme string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelAuthRecords", uid, scheme)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelAuthRecords indicates an expected call of DelAuthRecords
func (mr *MockUsersObjMapperInterfaceMockRecorder) DelAuthRecords(uid, scheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelAuthRecords", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).DelAuthRecords), uid, scheme)
}

// Get mocks base method
func (m *MockUsersObjMapperInterface) Get(uid types.Uid) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uid)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUsersObjMapperInterfaceMockRecorder) Get(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).Get), uid)
}

// GetAll mocks base method
func (m *MockUsersObjMapperInterface) GetAll(uid ...types.Uid) ([]types.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range uid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].([]types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetAll(uid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetAll), uid...)
}

// GetByCred mocks base method
func (m *MockUsersObjMapperInterface) GetByCred(method, value string) (types.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCred", method, value)
	ret0, _ := ret[0].(types.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCred indicates an expected call of GetByCred
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetByCred(method, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCred", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetByCred), method, value)
}

// Delete mocks base method
func (m *MockUsersObjMapperInterface) Delete(id types.Uid, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUsersObjMapperInterfaceMockRecorder) Delete(id, hard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).Delete), id, hard)
}

// UpdateLastSeen mocks base method
func (m *MockUsersObjMapperInterface) UpdateLastSeen(uid types.Uid, userAgent string, when time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSeen", uid, userAgent, when)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSeen indicates an expected call of UpdateLastSeen
func (mr *MockUsersObjMapperInterfaceMockRecorder) UpdateLastSeen(uid, userAgent, when interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSeen", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).UpdateLastSeen), uid, userAgent, when)
}

// Update mocks base method
func (m *MockUsersObjMapperInterface) Update(uid types.Uid, update map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", uid, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUsersObjMapperInterfaceMockRecorder) Update(uid, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).Update), uid, update)
}

// UpdateTags mocks base method
func (m *MockUsersObjMapperInterface) UpdateTags(uid types.Uid, add, remove, reset []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", uid, add, remove, reset)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags
func (mr *MockUsersObjMapperInterfaceMockRecorder) UpdateTags(uid, add, remove, reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).UpdateTags), uid, add, remove, reset)
}

// UpdateState mocks base method
func (m *MockUsersObjMapperInterface) UpdateState(uid types.Uid, state types.ObjState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", uid, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockUsersObjMapperInterfaceMockRecorder) UpdateState(uid, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).UpdateState), uid, state)
}

// GetSubs mocks base method
func (m *MockUsersObjMapperInterface) GetSubs(id types.Uid) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubs", id)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubs indicates an expected call of GetSubs
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetSubs(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubs", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetSubs), id)
}

// FindSubs mocks base method
func (m *MockUsersObjMapperInterface) FindSubs(id types.Uid, required [][]string, optional []string) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubs", id, required, optional)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubs indicates an expected call of FindSubs
func (mr *MockUsersObjMapperInterfaceMockRecorder) FindSubs(id, required, optional interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubs", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).FindSubs), id, required, optional)
}

// GetTopics mocks base method
func (m *MockUsersObjMapperInterface) GetTopics(id types.Uid, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopics", id, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopics indicates an expected call of GetTopics
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetTopics(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopics", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetTopics), id, opts)
}

// GetTopicsAny mocks base method
func (m *MockUsersObjMapperInterface) GetTopicsAny(id types.Uid, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsAny", id, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsAny indicates an expected call of GetTopicsAny
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetTopicsAny(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsAny", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetTopicsAny), id, opts)
}

// GetOwnTopics mocks base method
func (m *MockUsersObjMapperInterface) GetOwnTopics(id types.Uid) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnTopics", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnTopics indicates an expected call of GetOwnTopics
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetOwnTopics(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnTopics", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetOwnTopics), id)
}

// GetChannels mocks base method
func (m *MockUsersObjMapperInterface) GetChannels(id types.Uid) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannels", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannels indicates an expected call of GetChannels
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetChannels(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannels", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetChannels), id)
}

// UpsertCred mocks base method
func (m *MockUsersObjMapperInterface) UpsertCred(cred *types.Credential) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCred", cred)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertCred indicates an expected call of UpsertCred
func (mr *MockUsersObjMapperInterfaceMockRecorder) UpsertCred(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCred", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).UpsertCred), cred)
}

// ConfirmCred mocks base method
func (m *MockUsersObjMapperInterface) ConfirmCred(id types.Uid, method string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmCred", id, method)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmCred indicates an expected call of ConfirmCred
func (mr *MockUsersObjMapperInterfaceMockRecorder) ConfirmCred(id, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmCred", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).ConfirmCred), id, method)
}

// FailCred mocks base method
func (m *MockUsersObjMapperInterface) FailCred(id types.Uid, method string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailCred", id, method)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailCred indicates an expected call of FailCred
func (mr *MockUsersObjMapperInterfaceMockRecorder) FailCred(id, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailCred", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).FailCred), id, method)
}

// GetActiveCred mocks base method
func (m *MockUsersObjMapperInterface) GetActiveCred(id types.Uid, method string) (*types.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCred", id, method)
	ret0, _ := ret[0].(*types.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCred indicates an expected call of GetActiveCred
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetActiveCred(id, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCred", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetActiveCred), id, method)
}

// GetAllCreds mocks base method
func (m *MockUsersObjMapperInterface) GetAllCreds(id types.Uid, method string, validatedOnly bool) ([]types.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreds", id, method, validatedOnly)
	ret0, _ := ret[0].([]types.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreds indicates an expected call of GetAllCreds
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetAllCreds(id, method, validatedOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreds", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetAllCreds), id, method, validatedOnly)
}

// DelCred mocks base method
func (m *MockUsersObjMapperInterface) DelCred(id types.Uid, method, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelCred", id, method, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelCred indicates an expected call of DelCred
func (mr *MockUsersObjMapperInterfaceMockRecorder) DelCred(id, method, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCred", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).DelCred), id, method, value)
}

// GetUnreadCount mocks base method
func (m *MockUsersObjMapperInterface) GetUnreadCount(id types.Uid) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadCount", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadCount indicates an expected call of GetUnreadCount
func (mr *MockUsersObjMapperInterfaceMockRecorder) GetUnreadCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadCount", reflect.TypeOf((*MockUsersObjMapperInterface)(nil).GetUnreadCount), id)
}

// MockTopicsObjMapperInterface is a mock of TopicsObjMapperInterface interface
type MockTopicsObjMapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTopicsObjMapperInterfaceMockRecorder
}

// MockTopicsObjMapperInterfaceMockRecorder is the mock recorder for MockTopicsObjMapperInterface
type MockTopicsObjMapperInterfaceMockRecorder struct {
	mock *MockTopicsObjMapperInterface
}

// NewMockTopicsObjMapperInterface creates a new mock instance
func NewMockTopicsObjMapperInterface(ctrl *gomock.Controller) *MockTopicsObjMapperInterface {
	mock := &MockTopicsObjMapperInterface{ctrl: ctrl}
	mock.recorder = &MockTopicsObjMapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTopicsObjMapperInterface) EXPECT() *MockTopicsObjMapperInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTopicsObjMapperInterface) Create(topic *types.Topic, owner types.Uid, private interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", topic, owner, private)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTopicsObjMapperInterfaceMockRecorder) Create(topic, owner, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).Create), topic, owner, private)
}

// CreateP2P mocks base method
func (m *MockTopicsObjMapperInterface) CreateP2P(initiator, invited *types.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateP2P", initiator, invited)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateP2P indicates an expected call of CreateP2P
func (mr *MockTopicsObjMapperInterfaceMockRecorder) CreateP2P(initiator, invited interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateP2P", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).CreateP2P), initiator, invited)
}

// Get mocks base method
func (m *MockTopicsObjMapperInterface) Get(topic string) (*types.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", topic)
	ret0, _ := ret[0].(*types.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTopicsObjMapperInterfaceMockRecorder) Get(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).Get), topic)
}

// GetUsers mocks base method
func (m *MockTopicsObjMapperInterface) GetUsers(topic string, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", topic, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockTopicsObjMapperInterfaceMockRecorder) GetUsers(topic, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).GetUsers), topic, opts)
}

// GetUsersAny mocks base method
func (m *MockTopicsObjMapperInterface) GetUsersAny(topic string, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersAny", topic, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersAny indicates an expected call of GetUsersAny
func (mr *MockTopicsObjMapperInterfaceMockRecorder) GetUsersAny(topic, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersAny", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).GetUsersAny), topic, opts)
}

// GetSubs mocks base method
func (m *MockTopicsObjMapperInterface) GetSubs(topic string, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubs", topic, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubs indicates an expected call of GetSubs
func (mr *MockTopicsObjMapperInterfaceMockRecorder) GetSubs(topic, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubs", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).GetSubs), topic, opts)
}

// GetSubsAny mocks base method
func (m *MockTopicsObjMapperInterface) GetSubsAny(topic string, opts *types.QueryOpt) ([]types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubsAny", topic, opts)
	ret0, _ := ret[0].([]types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubsAny indicates an expected call of GetSubsAny
func (mr *MockTopicsObjMapperInterfaceMockRecorder) GetSubsAny(topic, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubsAny", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).GetSubsAny), topic, opts)
}

// Update mocks base method
func (m *MockTopicsObjMapperInterface) Update(topic string, update map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", topic, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTopicsObjMapperInterfaceMockRecorder) Update(topic, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).Update), topic, update)
}

// OwnerChange mocks base method
func (m *MockTopicsObjMapperInterface) OwnerChange(topic string, newOwner types.Uid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerChange", topic, newOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// OwnerChange indicates an expected call of OwnerChange
func (mr *MockTopicsObjMapperInterfaceMockRecorder) OwnerChange(topic, newOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerChange", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).OwnerChange), topic, newOwner)
}

// Delete mocks base method
func (m *MockTopicsObjMapperInterface) Delete(topic string, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", topic, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTopicsObjMapperInterfaceMockRecorder) Delete(topic, hard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTopicsObjMapperInterface)(nil).Delete), topic, hard)
}

// MockSubsObjMapperInterface is a mock of SubsObjMapperInterface interface
type MockSubsObjMapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubsObjMapperInterfaceMockRecorder
}

// MockSubsObjMapperInterfaceMockRecorder is the mock recorder for MockSubsObjMapperInterface
type MockSubsObjMapperInterfaceMockRecorder struct {
	mock *MockSubsObjMapperInterface
}

// NewMockSubsObjMapperInterface creates a new mock instance
func NewMockSubsObjMapperInterface(ctrl *gomock.Controller) *MockSubsObjMapperInterface {
	mock := &MockSubsObjMapperInterface{ctrl: ctrl}
	mock.recorder = &MockSubsObjMapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubsObjMapperInterface) EXPECT() *MockSubsObjMapperInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSubsObjMapperInterface) Create(subs ...*types.Subscription) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range subs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSubsObjMapperInterfaceMockRecorder) Create(subs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubsObjMapperInterface)(nil).Create), subs...)
}

// Get mocks base method
func (m *MockSubsObjMapperInterface) Get(topic string, user types.Uid) (*types.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", topic, user)
	ret0, _ := ret[0].(*types.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSubsObjMapperInterfaceMockRecorder) Get(topic, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubsObjMapperInterface)(nil).Get), topic, user)
}

// Update mocks base method
func (m *MockSubsObjMapperInterface) Update(topic string, user types.Uid, update map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", topic, user, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSubsObjMapperInterfaceMockRecorder) Update(topic, user, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubsObjMapperInterface)(nil).Update), topic, user, update)
}

// Delete mocks base method
func (m *MockSubsObjMapperInterface) Delete(topic string, user types.Uid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", topic, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSubsObjMapperInterfaceMockRecorder) Delete(topic, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubsObjMapperInterface)(nil).Delete), topic, user)
}

// MockMessagesObjMapperInterface is a mock of MessagesObjMapperInterface interface
type MockMessagesObjMapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesObjMapperInterfaceMockRecorder
}

// MockMessagesObjMapperInterfaceMockRecorder is the mock recorder for MockMessagesObjMapperInterface
type MockMessagesObjMapperInterfaceMockRecorder struct {
	mock *MockMessagesObjMapperInterface
}

// NewMockMessagesObjMapperInterface creates a new mock instance
func NewMockMessagesObjMapperInterface(ctrl *gomock.Controller) *MockMessagesObjMapperInterface {
	mock := &MockMessagesObjMapperInterface{ctrl: ctrl}
	mock.recorder = &MockMessagesObjMapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagesObjMapperInterface) EXPECT() *MockMessagesObjMapperInterfaceMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockMessagesObjMapperInterface) Save(msg *types.Message, readBySender bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", msg, readBySender)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockMessagesObjMapperInterfaceMockRecorder) Save(msg, readBySender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMessagesObjMapperInterface)(nil).Save), msg, readBySender)
}

// DeleteList mocks base method
func (m *MockMessagesObjMapperInterface) DeleteList(topic string, delID int, forUser types.Uid, ranges []types.Range) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", topic, delID, forUser, ranges)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList
func (mr *MockMessagesObjMapperInterfaceMockRecorder) DeleteList(topic, delID, forUser, ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockMessagesObjMapperInterface)(nil).DeleteList), topic, delID, forUser, ranges)
}

// GetAll mocks base method
func (m *MockMessagesObjMapperInterface) GetAll(topic string, forUser types.Uid, opt *types.QueryOpt) ([]types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", topic, forUser, opt)
	ret0, _ := ret[0].([]types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockMessagesObjMapperInterfaceMockRecorder) GetAll(topic, forUser, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMessagesObjMapperInterface)(nil).GetAll), topic, forUser, opt)
}

// GetDeleted mocks base method
func (m *MockMessagesObjMapperInterface) GetDeleted(topic string, forUser types.Uid, opt *types.QueryOpt) ([]types.Range, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleted", topic, forUser, opt)
	ret0, _ := ret[0].([]types.Range)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeleted indicates an expected call of GetDeleted
func (mr *MockMessagesObjMapperInterfaceMockRecorder) GetDeleted(topic, forUser, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockMessagesObjMapperInterface)(nil).GetDeleted), topic, forUser, opt)
}

// MockDeviceMapperInterface is a mock of DeviceMapperInterface interface
type MockDeviceMapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMapperInterfaceMockRecorder
}

// MockDeviceMapperInterfaceMockRecorder is the mock recorder for MockDeviceMapperInterface
type MockDeviceMapperInterfaceMockRecorder struct {
	mock *MockDeviceMapperInterface
}

// NewMockDeviceMapperInterface creates a new mock instance
func NewMockDeviceMapperInterface(ctrl *gomock.Controller) *MockDeviceMapperInterface {
	mock := &MockDeviceMapperInterface{ctrl: ctrl}
	mock.recorder = &MockDeviceMapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceMapperInterface) EXPECT() *MockDeviceMapperInterfaceMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockDeviceMapperInterface) Update(uid types.Uid, oldDeviceID string, dev *types.DeviceDef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", uid, oldDeviceID, dev)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDeviceMapperInterfaceMockRecorder) Update(uid, oldDeviceID, dev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceMapperInterface)(nil).Update), uid, oldDeviceID, dev)
}

// GetAll mocks base method
func (m *MockDeviceMapperInterface) GetAll(uid ...types.Uid) (map[types.Uid][]types.DeviceDef, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range uid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(map[types.Uid][]types.DeviceDef)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll
func (mr *MockDeviceMapperInterfaceMockRecorder) GetAll(uid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDeviceMapperInterface)(nil).GetAll), uid...)
}

// Delete mocks base method
func (m *MockDeviceMapperInterface) Delete(uid types.Uid, deviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uid, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeviceMapperInterfaceMockRecorder) Delete(uid, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeviceMapperInterface)(nil).Delete), uid, deviceID)
}

// MockFileMapperInterface is a mock of FileMapperInterface interface
type MockFileMapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFileMapperInterfaceMockRecorder
}

// MockFileMapperInterfaceMockRecorder is the mock recorder for MockFileMapperInterface
type MockFileMapperInterfaceMockRecorder struct {
	mock *MockFileMapperInterface
}

// NewMockFileMapperInterface creates a new mock instance
func NewMockFileMapperInterface(ctrl *gomock.Controller) *MockFileMapperInterface {
	mock := &MockFileMapperInterface{ctrl: ctrl}
	mock.recorder = &MockFileMapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileMapperInterface) EXPECT() *MockFileMapperInterfaceMockRecorder {
	return m.recorder
}

// StartUpload mocks base method
func (m *MockFileMapperInterface) StartUpload(fd *types.FileDef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUpload", fd)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartUpload indicates an expected call of StartUpload
func (mr *MockFileMapperInterfaceMockRecorder) StartUpload(fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUpload", reflect.TypeOf((*MockFileMapperInterface)(nil).StartUpload), fd)
}

// FinishUpload mocks base method
func (m *MockFileMapperInterface) FinishUpload(fid string, success bool, size int64) (*types.FileDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishUpload", fid, success, size)
	ret0, _ := ret[0].(*types.FileDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishUpload indicates an expected call of FinishUpload
func (mr *MockFileMapperInterfaceMockRecorder) FinishUpload(fid, success, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishUpload", reflect.TypeOf((*MockFileMapperInterface)(nil).FinishUpload), fid, success, size)
}

// Get mocks base method
func (m *MockFileMapperInterface) Get(fid string) (*types.FileDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", fid)
	ret0, _ := ret[0].(*types.FileDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFileMapperInterfaceMockRecorder) Get(fid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileMapperInterface)(nil).Get), fid)
}

// DeleteUnused mocks base method
func (m *MockFileMapperInterface) DeleteUnused(olderThan time.Time, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnused", olderThan, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnused indicates an expected call of DeleteUnused
func (mr *MockFileMapperInterfaceMockRecorder) DeleteUnused(olderThan, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnused", reflect.TypeOf((*MockFileMapperInterface)(nil).DeleteUnused), olderThan, limit)
}
